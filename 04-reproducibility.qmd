---
format: 
  html:
    theme: cosmo
  #  code-fold: show
unnumbered: true
editor: visual
execute:
  echo: true
  warning: false
  message: false
#  eval: false
---

# Reproducibility

This section outlines the steps and resources needed to reproduce the analysis presented in this thesis. Ensuring reproducibility is critical for validating findings and building upon existing research.

## Project Organization

**The project is organized into the following directories and files:**

-   **index.qmd**: The main Quarto file for the thesis.
-   **chapters**: all chapter files including the appendices are in root directory.
-   **data/**: Directory for all datasets used in the analysis.
-   **\_extensions/**: for the output settings (html and pdf) formats
-   **figures/**: Directory for all figures generated and used in the thesis.
-   **docs/**: Directory for the exported thesis.
-   **references.bib, apa.csl**: bibliography file and style
-   **README.qmd**: for guidance on this thesis project
-   **\_quarto.yml**: for setting up the output quarto

## Data and Code Availability

All data and code necessary to reproduce the analysis are provided within this repository:

-   **Data**: The dataset used for analysis is located in the `data/` directory (cleaned_data.rds).
-   **Code:** it is included inside the quarto files

### Data

The data used in this thesis can be found in the `data/` directory.

```{r eval= FALSE, echo=TRUE}
# Example of loading the data
cleaned_data <- readRDS(here("data/cleaned_data.rds"))
```

### Code

The R code for the analysis is included inside the quarto files. It performs data cleaning, analysis, and visualization.

## Steps to Reproduce

Follow these steps to reproduce the analysis:

1.  **Clone the Repository:**

```{bash eval= FALSE, echo=TRUE}

git clone https://github.com/alturabi1990/mph-thesis.git

cd mph-thesis

```

2.  **Install Required Libraries:**

```{r eval= FALSE, echo=TRUE}
 install.packages(c(
  "here",        # For creating relative file paths
  "dplyr",       # For data manipulation (filtering, selecting, mutating, etc.)
  "tidyr",       # For tidying data (reshaping, pivoting, etc.)
  "Hmisc",       # For additional data manipulation functions and labeling
  "ggplot2",     # For data visualization
  "gt",          # For creating 'gt' tables
  "gtsummary",   # For generating summary tables (e.g., descriptive statistics)
  "gtExtras"     # For extending 'gt' tables with additional features
))

```

3.  **Analysis & Render the Quarto Document:**

```{bash eval= FALSE, echo=TRUE}
 quarto render "index.qmd"

```

## Version Control

The project is managed using Git for version control. This allows tracking of changes and facilitates collaboration.

### Initializing Git

If you haven't already initialized a Git repository, you can do so with the following commands:

```{bash eval= FALSE, echo=TRUE}
# Initialize a git repository
 git init

# Add all files to the repository
 git add .

# Commit the changes
 git commit -m "Initial commit"

# Add a remote repository
 git remote add origin https://github.com/alturabi1990/mph-thesis.git

# Push the changes
 git push -u origin master

```

### Committing Changes

As you make changes to your project, commit these changes regularly:

```{bash eval= FALSE, echo=TRUE}
# Add changes to the staging area
git add .

# Commit the changes
git commit -m "Description of the changes made"

```

### Pushing Changes

After committing your changes, push them to your remote repository:

```{bash eval= FALSE, echo=TRUE}

git push origin master

```

## Software and Libraries

```{r, eval=TRUE, echo=FALSE}
# Load necessary library
library(sessioninfo)

# Define the specific packages you used
used_packages <- c(
  "here",        # For creating relative file paths
  "dplyr",       # For data manipulation (filtering, selecting, mutating, etc.)
  "tidyr",       # For tidying data (reshaping, pivoting, etc.)
  "Hmisc",       # For additional data manipulation functions and labeling
  "ggplot2",     # For data visualization
  "gt",          # For creating 'gt' tables
  "gtsummary",   # For generating summary tables (e.g., descriptive statistics)
  "gtExtras"     # For extending 'gt' tables with additional features
)

# Load each package to ensure it's available
invisible(sapply(used_packages, require, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE))

# Get R version
r_version <- R.version$version.string

# Get package versions for only the specified packages
package_versions <- session_info()$packages
filtered_packages <- package_versions[package_versions$package %in% used_packages, c("package", "loadedversion")]

```

```{r, eval=TRUE}
# Print the R version
cat("The analysis was conducted using", r_version, "\n", "and the following libraries:\n\n")

# Print each package and its version
for (i in seq_len(nrow(filtered_packages))) {
  cat(filtered_packages$package[i], "(version", filtered_packages$loadedversion[i], ")\n")
}

```

## Additional Information

For more detailed instructions on specific parts of the analysis or troubleshooting common issues, please refer to the `README.qmd` file in the root of the repository.
